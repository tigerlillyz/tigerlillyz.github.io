{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","candidateId","setCandidateId","candidates","setCandidates","candidateName","setCandidateName","GetCandidateId","props","url","fetch","then","r","json","results","id","name","GetCandidateFromId","className","input","setInput","onSubmit","e","preventDefault","currentTarget","value","type","onChange","contributions","cycle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oMA0EeA,MAxEf,WAAgB,IAAD,EAEyBC,mBAAS,IAFlC,mBAENC,EAFM,KAEOC,EAFP,OAGuBF,mBAAS,IAHhC,mBAGNG,EAHM,KAGMC,EAHN,OAI6BJ,mBAAS,IAJtC,mBAINK,EAJM,KAISC,EAJT,KAMb,SAASC,EAAeC,GACtB,IAAMC,EAAG,0DAAsDD,EAAtD,qDACTE,MAAMD,GACHE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIA,EAAEE,WACZH,MAAK,SAAAC,GACJV,EAAeU,EAAE,GAAGG,IACpBT,EAAiBM,EAAE,GAAGI,MAK5B,SAA4BR,GAC1B,IAAMC,EAAG,gDAA4CD,EAA5C,uKACTE,MAAMD,GACHE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIA,EAAEE,WACZH,MAAK,SAAAC,GAAC,OAAIR,EAAcQ,EAAE,OATzBK,CAAmBL,EAAE,GAAGG,OA0C9B,OACE,yBAAKG,UAAU,OACb,mBAxBJ,WAAsB,IAAD,EACOlB,mBAAS,IADhB,mBACZmB,EADY,KACLC,EADK,KAanB,OACE,0BAAMC,SANa,SAACC,GACpBA,EAAEC,iBACFhB,EAAee,EAAEE,cAAcnB,cAAcoB,SAK3C,kDACA,2BAAOC,KAAK,OAAOV,KAAK,gBAAgBW,SAblB,SAACL,GAAD,OAAOF,EAAS,eACrCD,EADoC,eAEtCG,EAAEE,cAAcR,KAAOM,EAAEE,cAAcC,YAYtC,2BAAOC,KAAK,cAOd,MACA,oDACCzB,EAHH,IAGgB,6BACbI,EAJH,IAIkB,6BACf,+CAGkBF,EAAWyB,cAH7B,IAG4C,6BAH5C,UAIUzB,EAAW0B,SCxDRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.63d93955.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n\n  const [candidateId, setCandidateId] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [candidateName, setCandidateName] = useState(\"\");\n\n  function GetCandidateId(props) {\n    const url = `https://api.open.fec.gov/v1/names/candidates/?q=${props}&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp`\n    fetch(url)\n      .then(r => r.json())\n      .then(r => r.results)\n      .then(r => {\n        setCandidateId(r[0].id);\n        setCandidateName(r[0].name);\n        GetCandidateFromId(r[0].id);\n      });\n  }\n\n  function GetCandidateFromId(props) {\n    const url = `https://api.open.fec.gov/v1/candidate/${props}/totals/?sort_null_only=false&per_page=20&sort_hide_null=false&cycle=2020&sort=-cycle&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp&page=1&sort_nulls_last=false`\n    fetch(url)\n      .then(r => r.json())\n      .then(r => r.results)\n      .then(r => setCandidates(r[0]));\n  }\n\n  // function GetCandidateFromId(props) {\n  //   const url = `https://api.open.fec.gov/v1/candidate/${props}/?sort=name&page=1&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp&sort_null_only=false&sort_nulls_last=false&sort_hide_null=false&per_page=20`\n  //   fetch(url)\n  //     .then(r => r.json())\n  //     .then(r => r.results)\n  //     .then(r => setCandidates(r[0]));\n  // }\n\n  function SearchBar() {\n    const [input, setInput] = useState({});\n\n    const handleInputChange = (e) => setInput({\n      ...input,\n      [e.currentTarget.name]: e.currentTarget.value\n    })\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      GetCandidateId(e.currentTarget.candidateName.value);\n    }\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <label>Candidate Name:</label>\n        <input type=\"text\" name=\"candidateName\" onChange={handleInputChange} />\n        <input type=\"submit\" />\n      </form>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchBar />\n      <h2>Candidates and Party</h2>\n      {candidateId} <br />\n      {candidateName} <br/>\n       <div>\n         {/* Name: {candidates.name} <br />\n         Party: {candidates.party_full} */}\n         Contributions: {candidates.contributions} <br/>\n         Cycle: {candidates.cycle}\n       </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}